html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  font-family: 'proxima-nova',sans-serif;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  font-family: $font-montserratlight;
}

main {
  min-height: 100%;
}

* {
  box-sizing: border-box;
  -webkit-appearance: none;
  outline: none;
}

figure {
  margin: 0;
}

ol, ul {
  list-style: none;
  list-style-type: none;
  margin: 0;
  padding: 0;
}

input {
  border: none;
}

button {
  cursor: pointer;
}

a {
  text-decoration: none;
  cursor: pointer;
}

h1, h2, h3, h4, h5 {
  margin: 0;
}

$gap: 28px;
$mobile: 320px;
$tablet: 769px;
$desktop: 924px;
$desktop-md: 1152px + (2 * $gap);
$desktop-lg: 1344px + (2 * $gap);

$breakpoints: (
  mobile: $mobile,
  tablet: $tablet,
  desktop: $desktop,
  desktop-md: $desktop-md,
  desktop-lg: $desktop-lg
);

$breakpoints_raw: ( $mobile, $tablet, $desktop, $desktop-md, $desktop-lg );

@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @media (min-width: $breakpoint) {
      @content;
    }
  }
}

@mixin mobile {
  @include breakpoint($mobile) {
    @content;
  }
}

@mixin tablet {
  @include breakpoint($tablet) {
    @content;
  }
}

@mixin desktop {
  @include breakpoint($desktop) {
    @content;
  }
}

@mixin desktop-md {
  @include breakpoint($desktop-md) {
    @content;
  }
}

@mixin desktop-lg {
  @include breakpoint($desktop-lg) {
    @content;
  }
}

@mixin maxpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint) - 1}) {
      @content;
    }
  } @else {
    @media (min-width: $breakpoint) {
      @content;
    }
  }
}

/*---------------------------------------------------------------*\
  RESPONSIVE PROPERTY HANDLER
    handles the per-breakpoint property for mobile-first approach

    note: requires a key-less 'breakpoints' scss map
          e.g. $breakpoints: ( 320px, 760px, 1080px, 1280px );

    usage:
      @include respond((
        display: flex,
        margin: (2px, 3px, 4px, 5px),
        padding: (3rem, 4rem, 5rem, 6rem),
        flex: ("0 1 50%", null, (1 1 100%))
      ));
\*---------------------------------------------------------------*/

@mixin respond($args) {
  @for $bp from 1 through length($breakpoints_raw) { // loop through all the breakpoints
    @media screen and (min-width: #{nth($breakpoints_raw, $bp)}) { // set media query
      @each $propname, $propvalues in $args { // loop through all the properties
        @if $bp <= length($propvalues) { // check if the number of values is less than the number of breakpoints
          $value : unquote(#{nth($propvalues, $bp)});
          @if( $propname != null ) {
            #{$propname} : $value; // apply value to the property
          }
        }
      }
    }
  }
}

//-----------------------------------------------------------------------
// GRID SPAN
//
//  usage:
//    width: get-span(2, 20);
//-----------------------------------------------------------------------
@function get-span($span, $parent) {
  @return ($span / $parent) * 100%;
}